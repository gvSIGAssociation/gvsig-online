# Generated by Django 2.2.27 on 2022-10-27 11:34

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion

def reset_sequence(apps, schema_editor):
    sql = """
    SELECT setval(
        (SELECT pg_get_serial_sequence('public.gvsigol_plugin_featureapi_featureversions', 'id')),
        s1.max_id)
    FROM
        ( SELECT MAX(id) max_id from public.gvsigol_plugin_featureapi_featureversions ) s1"""
    schema_editor.execute(sql)

def data_exists(apps, schema_editor):
    sql = """SELECT count(1) from public.gvsigol_plugin_featureapi_featureversions"""
    with schema_editor.connection.cursor() as cursor:
            cursor.execute(sql)
            r = cursor.fetchall()
            if r[0][0] > 0:
                return True
    return False

def copy_data(apps, schema_editor):
    sql = """
        INSERT INTO public.gvsigol_plugin_featureapi_featureversions
           (id, version, wkb_geometry, fields, date, usr, feat_id, operation, resource, layer_id)
        SELECT
           id, version, wkb_geometry, fields, date, usr, feat_id, operation, resource, layer_id
        FROM public.gvsigol_plugin_restapi_featurechange
        """
    schema_editor.execute(sql)

def apply(apps, schema_editor):
    try:
        if not data_exists(apps, schema_editor):
            copy_data(apps, schema_editor)
    except:
        # ignore errors, it may fail if plugin_restapi was not installed
        pass
    # We reset sequence even if no data was copied, because an earlier
    # version of the 0002_copy_data migration copied data and did not
    # properly reset the sequence. Resetting should be harmless anyway.
    reset_sequence(apps, schema_editor)

class Migration(migrations.Migration):
    dependencies = [
        ('gvsigol_plugin_featureapi', '0002_copy_data'),
    ]

    operations = [
        migrations.RunPython(apply, migrations.RunPython.noop)
    ]
