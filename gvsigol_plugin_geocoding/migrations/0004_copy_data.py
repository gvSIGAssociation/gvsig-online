# Generated by Django 2.2.27 on 2022-10-27 11:34

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


def data_exists(apps, schema_editor):
    sql = """SELECT count(1) from public.gvsigol_plugin_geocoding_logstashetl WHERE type = 'OUTPUT' OR type = 'FILTER'"""
    with schema_editor.connection.cursor() as cursor:
            cursor.execute(sql)
            r = cursor.fetchall()
            if r[0][0] > 1:
                return True
    return False

def copy_output(apps, schema_editor):
    print("copy output")
    sql = """
        INSERT INTO public.gvsigol_plugin_geocoding_logstashetl(id, type, config, provider_id) VALUES (
            DEFAULT,
            'OUTPUT',
            'elasticsearch {
                hosts => [\"http://${ELASTICSEARCH_URL}:9200\"]
                index => \"gvsigol_%%{[@metadata][index_name]}\"
                user => \"${ELASTICSEARCH_USER}\"
                password => \"${ELASTICSEARCH_PASS}\"
                action => update
                document_id => \"%%{id}\"
                doc_as_upsert =>true
            }',
            -1
        )
        """
    schema_editor.execute(sql)
    print("copy output fin")

def copy_filter(apps, schema_editor):
    print("copy filter")
    sql = """
        INSERT INTO public.gvsigol_plugin_geocoding_logstashetl(id, type, config, provider_id) VALUES (
            DEFAULT,
            'FILTER',
            'mutate {
                add_field => { \"[@metadata][index_name]\" => \"%%{index_dst}\" }
            }',
            -1
        )
        """
    schema_editor.execute(sql)
    print("copy filter fin")

def apply(apps, schema_editor):
    try:
        if not data_exists(apps, schema_editor):
            copy_filter(apps, schema_editor)
            copy_output(apps, schema_editor)
    except Exception as e:
        # ignore errors, it may fail if plugin_restapi was not installed
        # rollback transaction to get a clean DB connection status
        print("ERROR: ", str(e))
        schema_editor.execute("ROLLBACK")
    

class Migration(migrations.Migration):
    dependencies = [
        ('gvsigol_plugin_geocoding', '0003_logstashetl'),
    ]

    operations = [
        migrations.RunPython(apply, migrations.RunPython.noop)
    ]
