# Generated by Django 2.2.27 on 2022-03-28 14:41

from django.db import migrations
import json


def get_json_toc(apps, project_layergroups, base_group=None, layergroup_order={}):
    """
    Method copied from gvsigol_core.utils because we need
    to import Layer and LayerGroup using apps.get_model
    """
    LayerGroup = apps.get_model("gvsigol_services", "LayerGroup")
    Layer = apps.get_model("gvsigol_services", "Layer")
    toc = {}
    group_count = 1
    order_dict = {}
    for lg in layergroup_order.values():
        if lg.get('order') is not None:
            order_dict[lg.get('name')] = lg.get('order')


    for lg in project_layergroups:
        toc_layergroup = {}
        layer_group = LayerGroup.objects.get(id=lg)
        if base_group == layer_group.id:
            order = 500
        else:
            order = order_dict.get(layer_group.name, group_count * 1000)
        toc_layergroup['name'] = layer_group.name
        toc_layergroup['title'] = layer_group.title
        toc_layergroup['order'] = order
        
        toc_layers = {}
        layers_in_group = Layer.objects.filter(layer_group_id=layer_group.id).order_by("order")
        layer_count = 1
        for l in layers_in_group: 
            toc_layers[l.name] = {
                'name': l.name,
                'title': l.title,
                'order': order + layer_count
            }
            layer_count += 1
        toc_layergroup['layers'] = toc_layers
        toc[layer_group.name] = toc_layergroup
        group_count += 1
        
    return json.dumps(toc)

def toc_order_fix(apps, schema_editor):
    """
    Ensures base layers have the lowest z-index in toc-order
    """
    Project = apps.get_model("gvsigol_core", "Project")
    ProjectLayerGroup = apps.get_model("gvsigol_core", "ProjectLayerGroup")
    for project in Project.objects.all():
        assigned_layergroups = list(ProjectLayerGroup.objects.filter(project=project).values_list("layer_group__id", flat=True))
        try:
            plg = ProjectLayerGroup.objects.get(project=project, baselayer_group=True)
            selected_base_group = plg.layer_group.id
        except:
            selected_base_group = None
        if project.toc_order:
            project.toc_order = get_json_toc(apps, assigned_layergroups, selected_base_group, json.loads(project.toc_order))
        else:
            project.toc_order = get_json_toc(apps, assigned_layergroups, selected_base_group)
        project.save()


class Migration(migrations.Migration):

    dependencies = [
        ('gvsigol_core', '0043_projectusergrouprole'),
    ]

    operations = [
        migrations.RunPython(toc_order_fix, reverse_code=migrations.RunPython.noop),
    ]
